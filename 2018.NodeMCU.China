#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// Init Sensor
#define DHTTYPE DHT22
#define DHTPIN  2
DHT dht(DHTPIN, DHTTYPE);

// Init Wifi
#define wifi_ssid "Wifi_ssd"
#define wifi_password "wifipassword"

WiFiClient espClient;
PubSubClient client(espClient);

unsigned long lastSend;

// Init MQTT Server
#define mqtt_server "serverIP"
#define mqtt_user "sensor"
#define mqtt_password "mqtt_password"
#define humidity_topic "cr/sensor/humidity/cr17"
#define temperature_celsius_topic "cr/sensor/temperature/cr17C"
#define temperature_fahrenheit_topic "cr/sensor/temperature/cr17"


// *****************************************
// Run at startup
// *****************************************
void setup(){
  Serial.begin(9600);
  dht.begin();
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  lastSend =0;
//  pinMode(2, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
}


// *****************************************
// Run continuosly
// *****************************************
void loop(){
  if (!client.connected()) {
    Serial.println("Client not connected. Starting reconnect");
    reconnect();
  }

  if (millis() - lastSend > 1000){
    Get_Temp_Data();
    lastSend = millis();
    Serial.print("Loop: Status of Wifi:");
    Serial.println(WiFi.status());
    Serial.print("Loop: Client connected?:");
    Serial.println(client.connected());
  }

  client.loop();
}

      
// *****************************************
// Get Temperature
// *****************************************
void Get_Temp_Data() {
  Serial.println("__");
  Serial.print("Collecting Temp Data:");

  // Reading temperature or humidity takes about 250 milliseconds!
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);
      
  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }
      
  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);
 
  Serial.println("Got Data.");
  Serial.println("__");
  Serial.print(String(t).c_str());
  Serial.print("C, ");
  client.publish(temperature_celsius_topic, String(t).c_str(), true);

  Serial.print(String(f).c_str());
  Serial.print("F, ");
  client.publish(temperature_fahrenheit_topic, String(f).c_str(), true);

  Serial.print(String(h).c_str());
  Serial.print("H. ");
  client.publish(humidity_topic, String(h).c_str(), true);

  Serial.println("Values sent to MQTT.");

}

// *****************************************
//                 Setup Wifi
//Serial.print(client.state());
// *****************************************
void setup_wifi() {
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(wifi_ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(wifi_ssid, wifi_password);
  Serial.print("Wifi Status:");
  Serial.println(WiFi.status());
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Wifi Connected. Wifi Status:");
  Serial.println(WiFi.status());
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}


void reconnect() {
  // Loop until we're reconnected
  Serial.println("Reconnecting Loop");

/*  while (!client.connected()) {
    Serial.println("Not connected to Wifi.");
    if (WiFi.status() != WL_CONNECTED){
      WiFi.begin(wifi_ssid, wifi_password);
      //while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.print(".");
      //}
      Serial.println("");
      Serial.println("WiFi connected");
    }
  } //End !client.connected()
  */
  String clientName;  
  clientName = "esp8266-cr17";

  // Attempt to connect
  // If you do not want to use a username and password, change next line to
  // if (client.connect((char*) clientName.c_str())) {
  if (client.connect((char*) clientName.c_str()), mqtt_user, mqtt_password) {
    Serial.println("Connected to MQTT");
    } else {
    Serial.print("MQTT failed, rc=");
    Serial.print(client.state());
    Serial.println("Didn't connect. Try again in 5 seconds");
    // Wait 5 seconds before retrying
    delay(5000);
  }
  
  Serial.print("Reconnect Loop ended...");
}


void software_Reboot()
{
  wdt_enable(WDTO_15MS);
  while(1){}
}
  
